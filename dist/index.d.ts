import { QueryBuilder } from './core/query-builder';
import { AuthModule } from './modules/auth';
import { LogicModule } from './modules/logic';
import { AIModule } from './modules/ai';
import { StorageModule } from './modules/storage';
import { EmailModule } from './modules/email';
import { PushModule } from './modules/push';
import { RealtimeModule } from './modules/realtime';
import { WorkflowModule } from './modules/workflow';
import { N8nWorkflowModule } from './modules/n8n-workflow';
import { SchemaModule } from './modules/schema';
import { TriggersModule } from './modules/triggers';
import { PaymentModule } from './modules/payment';
import { ImageProcessingModule } from './modules/image-processing';
import { PDFModule } from './modules/pdf';
import { OCRModule } from './modules/ocr';
import { DocumentConversionModule } from './modules/document-conversion';
import { ProjectOAuthModule } from './project-oauth';
import { ClientConfig } from './types';
export declare class AppAtOnceClient {
    private httpClient;
    readonly auth: AuthModule;
    readonly logic: LogicModule;
    readonly ai: AIModule;
    readonly storage: StorageModule;
    readonly email: EmailModule;
    readonly push: PushModule;
    readonly realtime: RealtimeModule;
    readonly workflow: WorkflowModule;
    readonly n8nWorkflow: N8nWorkflowModule;
    readonly schema: SchemaModule;
    readonly triggers: TriggersModule;
    readonly payment: PaymentModule;
    readonly imageProcessing: ImageProcessingModule;
    readonly pdf: PDFModule;
    readonly ocr: OCRModule;
    readonly documentConversion: DocumentConversionModule;
    readonly projectOAuth: ProjectOAuthModule;
    constructor(config: ClientConfig);
    table<T = any>(tableName: string): QueryBuilder<T>;
    select<T = any>(tableName: string): Promise<T[]>;
    insert<T = any>(tableName: string, data: Partial<T>): Promise<T>;
    update<T = any>(tableName: string, where: Record<string, any>, data: Partial<T>): Promise<T[]>;
    delete(tableName: string, where: Record<string, any>): Promise<{
        count: number;
    }>;
    count(tableName: string, where?: Record<string, any>): Promise<number>;
    ping(): Promise<{
        status: string;
        timestamp: string;
        version: string;
    }>;
    updateApiKey(apiKey: string): void;
    getConfig(): ClientConfig;
    batch(operations: Array<{
        type: 'select' | 'insert' | 'update' | 'delete';
        table: string;
        data?: any;
        where?: Record<string, any>;
    }>): Promise<Array<{
        success: boolean;
        result?: any;
        error?: string;
    }>>;
    transaction<T>(callback: (client: AppAtOnceClient) => Promise<T>): Promise<T>;
    onConnectionChange(callback: (connected: boolean) => void): () => void;
    onError(callback: (error: any) => void): () => void;
    disconnect(): Promise<void>;
}
export declare namespace AppAtOnceClient {
    function create(config: ClientConfig): AppAtOnceClient;
    function createWithApiKey(apiKey: string, baseUrl?: string): AppAtOnceClient;
    function createWithCredentials(email: string, password: string, baseUrl?: string): Promise<AppAtOnceClient>;
    function createForProject(projectId: string, apiKey: string, baseUrl?: string): AppAtOnceClient;
    function createForApp(appId: string, apiKey: string, baseUrl?: string): AppAtOnceClient;
}
export * from './types';
export * from './core/query-builder';
export * from './core/http-client';
export * from './modules/auth';
export * from './modules/logic';
export * from './modules/ai';
export * from './modules/storage';
export * from './modules/email';
export * from './modules/push';
export * from './modules/realtime';
export * from './modules/workflow';
export * from './modules/n8n-workflow';
export * from './modules/schema';
export * from './modules/triggers';
export * from './modules/payment';
export * from './modules/image-processing';
export * from './modules/pdf';
export * from './modules/ocr';
export * from './modules/document-conversion';
export * from './auth/oauth';
export * from './project-oauth';
export * from './types/project-oauth';
export default AppAtOnceClient;
